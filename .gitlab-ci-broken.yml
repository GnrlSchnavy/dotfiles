# GitLab CI/CD Pipeline for macOS Dotfiles Testing
#
# Note: This pipeline requires macOS runners to be available.
# GitLab.com shared runners don't support macOS, so you'll need:
# 1. Self-hosted GitLab Runner on macOS, or
# 2. GitLab SaaS with macOS runners (if available), or
# 3. Alternative testing approach using Docker/VM simulation

stages:
  - validate
  - test
  - report

# Global variables
variables:
  # CI environment flags
  CI: "true"
  DOTFILES_CI: "true"
  HOMEBREW_NO_AUTO_UPDATE: "1"
  HOMEBREW_NO_INSTALL_CLEANUP: "1"
  HOMEBREW_NO_ANALYTICS: "1"
  NONINTERACTIVE: "1"

# Template for macOS jobs (requires self-hosted runner with macOS tag)
.macos_template: &macos_template
  tags:
    - macos       # Requires self-hosted runner with 'macos' tag
    - apple-silicon  # Optional: specific architecture tag

# Job 1: Quick validation (can run on any runner)
validate:
  stage: validate
  image: alpine:latest
  script:
    - echo "🔍 Validating repository structure..."
    - test -f "setup.sh" || (echo "❌ setup.sh not found" && exit 1)
    - test -d "nix" || (echo "❌ nix directory not found" && exit 1)
    - test -d "scripts" || (echo "❌ scripts directory not found" && exit 1)
    - test -f "scripts/ci-setup.sh" || (echo "❌ ci-setup.sh not found" && exit 1)
    - test -f "scripts/ci-verify.sh" || (echo "❌ ci-verify.sh not found" && exit 1)
    - echo "✅ Repository structure validation passed"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH =~ /^ci\/.*/
    - if: $CI_PIPELINE_SOURCE == "web"

# Job 2: Full macOS installation test (requires macOS runner)
test_macos_setup:
  stage: test
  tags:
    - macos
    - apple-silicon
  timeout: 60m
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - "**/*"
        - "!**.md"
        - "!docs/**"
    - if: $CI_COMMIT_BRANCH =~ /^ci\/.*/
      changes:
        - "**/*"
        - "!**.md"
        - "!docs/**"
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "schedule"
  before_script:
    - echo "System Information"
    - whoami
    - pwd
  script:
    - echo "Pre-cleanup environment"
    - rm -rf ~/.dotfiles 2>/dev/null || true
    - rm -rf ~/.nix-* ~/.nixpkgs 2>/dev/null || true
    - find ~ -maxdepth 1 -type l -name ".*" -exec rm {} \; 2>/dev/null || true
    - echo "Running CI setup script"
    - chmod +x ./scripts/ci-setup.sh
    - ./scripts/ci-setup.sh
    - echo "Running verification script"
    - chmod +x ./scripts/ci-verify.sh
    - ./scripts/ci-verify.sh
    - echo "Running health check"
    - cd ~/.dotfiles
    - ./scripts/check.sh
    - echo "Testing development workflow"
    - source ~/.zprofile || true
    - git --version
    - kubectl version --client || echo "kubectl not available"
    - command -v nvm && echo "nvm available" || echo "nvm not found"
    - command -v jenv && echo "jenv available" || echo "jenv not found"
    - alias k >/dev/null 2>&1 && echo "kubectl alias works" || echo "kubectl alias not found"
    - echo "macOS setup test completed successfully"

  after_script:
    - echo "Generating installation report"
    - echo "Pipeline completed successfully"


# Job 3: Alternative simulation test (temporarily disabled for debugging)
# test_simulation:
#   stage: test
#   image: ubuntu:22.04
#   script:
#     - echo "Running simulation test"
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $ENABLE_SIMULATION == "true"
#   allow_failure: true

# Job 4: Generate summary report
report:
  stage: report
  image: alpine:latest
  script:
    - echo "Pipeline Summary Report"
    - echo "Report completed"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH =~ /^ci\/.*/
    - if: $CI_PIPELINE_SOURCE == "web"
  when: always

# Include additional configuration for specific environments
# include:
#   # Could include templates for different environments
#   - local: '.gitlab-ci-templates.yml'
#     rules:
#       - if: $CI_PROJECT_PATH == "YvanStemmerik/dotfiles"  # Only for your specific project